using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Ionic.Zlib;

namespace KartRider.File
{
    public class RhoHeader
    {
        public byte[] StreamInfosKey;

        public bool IsCorrectRhoFile => Check == 0x00010001;

        public uint StreamInfoCount;

        public uint Check;

        public uint Hash;

        public uint b;
        public RhoHeader(byte[] data,uint HeaderKey)
        {
            byte[] newData = Crypt.RhoCrypt.DecryptHeader(data, HeaderKey);
            byte[] _hash_data = new byte[0x7C];
            Array.Copy(newData, 0x04, _hash_data, 0, 0x7C);
            uint Hash = Adler.Adler32(0, _hash_data, 0, _hash_data.Length);
            using (MemoryStream ms = new MemoryStream(newData))
            {
                BinaryReader br = new BinaryReader(ms);
                this.Hash = br.ReadUInt32();
                if (Hash != this.Hash)
                    throw new Exception("*** RhoDecoderError!!! Reason: The hash is not match.");
                Check = br.ReadUInt32();
                this.StreamInfoCount = br.ReadUInt32();
                b = br.ReadUInt32();
            }
        }
    }

    public static class HeaderCrypt
    {
        public static byte[] dataA = {
    0x16, 0x0F, 0x9C, 0x29, 0xC1, 0xF0, 0x8C, 0xF7, 0x64, 0xD1, 0xF7, 0x28,
    0x41, 0x12, 0x4A, 0x4F, 0x81, 0x0B, 0x6B, 0xE9, 0xC0, 0x5F, 0xFA, 0xAF,
    0x29, 0x18, 0xAB, 0xF4, 0x1A, 0x0A, 0x67, 0x14, 0xC4, 0xF6, 0x73, 0xE5,
    0x5F, 0x4F, 0x73, 0x23, 0x15, 0xB1, 0xCA, 0xEC, 0x0F, 0x8F, 0x4A, 0xE3,
    0x72, 0x1A, 0xC8, 0x97, 0x20, 0x32, 0xA7, 0xA3, 0xBA, 0x59, 0xE9, 0x00,
    0x98, 0xB6, 0x66, 0x15, 0xD3, 0x95, 0xD8, 0x9D, 0x82, 0x6B, 0xE2, 0x88,
    0x6E, 0x80, 0xC1, 0x26, 0x8B, 0xB0, 0x9C, 0x1C, 0xF2, 0x5B, 0xCF, 0xCF,
    0x74, 0x4B, 0xCC, 0xC1, 0xE5, 0x2D, 0x8D, 0x8B, 0xE2, 0x1F, 0x3E, 0x62,
    0x30, 0xDD, 0x17, 0x39, 0x83, 0xDC, 0xBB, 0x0D, 0x73, 0xBE, 0x20, 0x46,
    0x71, 0xA5, 0x86, 0x4F, 0x7D, 0x86, 0x2B, 0x7A, 0xDC, 0x31, 0x70, 0x39,
    0xFB, 0x2F, 0x40, 0x6D, 0x01, 0xF6, 0xEF, 0x18, 0xAA, 0xEB, 0x02, 0x12,
    0xD6, 0xE7, 0x24, 0xA9, 0x50, 0xC3, 0x98, 0xE9, 0xBD, 0xA2, 0x5D, 0x93,
    0x21, 0x63, 0x95, 0x8F, 0x01, 0xD5, 0xF2, 0xA8, 0xCD, 0x91, 0x0D, 0x2B,
    0x65, 0xA7, 0xF8, 0x16, 0x68, 0xA9, 0x1F, 0xC6, 0x9E, 0x75, 0x50, 0x16,
    0x8C, 0x48, 0xC8, 0xAA, 0xEB, 0xBC, 0x63, 0xCA, 0x6E, 0x16, 0xA8, 0xE8,
    0x2E, 0x27, 0x1E, 0x5D, 0x05, 0x0A, 0xA6, 0x50, 0x94, 0x78, 0xFC, 0x21,
    0x86, 0x63, 0x9A, 0xA3, 0x2B, 0xB8, 0xFA, 0xCD, 0x9C, 0x83, 0x42, 0x74,
    0xAF, 0x7D, 0x5F, 0xB7, 0xF8, 0x67, 0xDA, 0xD7, 0xB4, 0xDB, 0x89, 0x8A,
    0x0C, 0x1F, 0x31, 0xBF, 0xFF, 0x05, 0xC0, 0xA7, 0xAF, 0x33, 0x1A, 0x7D,
    0x1D, 0x03, 0xB3, 0x6A, 0x8D, 0x97, 0xE8, 0x89, 0xE4, 0x79, 0x09, 0x57,
    0x98, 0x85, 0x3F, 0x06, 0x6B, 0x52, 0xC0, 0xF8, 0x24, 0x00, 0xD0, 0x81,
    0xFF, 0xEE, 0x0F, 0x68, 0x99, 0xE6, 0x4E, 0xE5, 0x75, 0x71, 0x8F, 0x8B,
    0x95, 0x14, 0xB2, 0x38, 0x29, 0x51, 0x87, 0x3C, 0xEB, 0x8D, 0x7B, 0x69,
    0x92, 0xCD, 0x2E, 0xD8, 0xC9, 0xDA, 0x5D, 0x15, 0xBB, 0xAA, 0x52, 0xB9,
    0xBE, 0x11, 0xF0, 0x96, 0x54, 0xE4, 0x3A, 0xC2, 0xFB, 0xB1, 0xB9, 0xB9,
    0xB0, 0x1C, 0xBB, 0xE9, 0xDB, 0xC6, 0x6E, 0xAD, 0x5A, 0x3E, 0x9C, 0xD2,
    0x1C, 0xC7, 0x52, 0x54, 0x90, 0x8E, 0x0C, 0x9D, 0x9B, 0xCB, 0xF5, 0xE3,
    0xE9, 0x9C, 0xC7, 0xEE, 0x13, 0xD9, 0x31, 0x02, 0xD8, 0x6F, 0x0C, 0x4D,
    0x15, 0xE1, 0x5A, 0x1E, 0xC2, 0xD8, 0x89, 0xA4, 0xFE, 0x46, 0x69, 0x5E,
    0x09, 0x8C, 0x4F, 0xE0, 0x70, 0x78, 0x64, 0x1D, 0x34, 0xE4, 0x86, 0x2E,
    0x0F, 0xB1, 0x84, 0x0A, 0x9D, 0x6C, 0x37, 0x4F, 0x4E, 0x7B, 0x26, 0xD7,
    0x72, 0x8D, 0xCE, 0x2B, 0xB9, 0xED, 0x52, 0x70, 0xBE, 0xA2, 0x35, 0x46,
    0xD3, 0x88, 0xD2, 0x0B, 0xFD, 0xCE, 0x20, 0xD8, 0x85, 0xD7, 0x78, 0x4C,
    0x5E, 0x95, 0xD7, 0x61, 0xE3, 0xBC, 0xC6, 0x33, 0xFE, 0x7F, 0xBB, 0x52,
    0x3A, 0x91, 0xBA, 0x8B, 0x1B, 0xF7, 0x17, 0x96, 0x5C, 0x5F, 0x72, 0xE9,
    0x3E, 0x58, 0x90, 0x58, 0x92, 0x37, 0x13, 0x77, 0xFA, 0xC5, 0xA0, 0x2F,
    0x59, 0xA2, 0xD5, 0xA6, 0x13, 0xD0, 0xF6, 0xE7, 0x4A, 0x51, 0xAD, 0xE3,
    0x2E, 0xF6, 0xE4, 0x34, 0x8D, 0xE9, 0xB1, 0x54, 0xFB, 0xD0, 0x42, 0x36,
    0x5E, 0x8F, 0xA7, 0x70, 0x4A, 0xC0, 0x17, 0x6A, 0xD1, 0x5F, 0x86, 0x07,
    0x3D, 0x22, 0xED, 0x4C, 0x6C, 0x49, 0x5D, 0x98, 0x7F, 0x63, 0x4C, 0x09,
    0xB2, 0x67, 0x1A, 0x9C, 0x08, 0x81, 0x81, 0xE0, 0x50, 0x9B, 0xE9, 0x4E,
    0x1A, 0x10, 0x45, 0x7D, 0x8D, 0xEC, 0x8A, 0x89, 0x62, 0x99, 0x78, 0x78,
    0x86, 0x43, 0x6B, 0x7D, 0x43, 0xFF, 0x1C, 0x6F, 0x76, 0x74, 0xE7, 0x47,
    0x2A, 0xF4, 0x4A, 0x08, 0xF8, 0xB3, 0xA1, 0x6F, 0x69, 0x73, 0x1F, 0x9B,
    0x75, 0x6B, 0xCB, 0xFE, 0xEA, 0x4F, 0xF9, 0x10, 0x08, 0xC0, 0xC3, 0xC0,
    0x01, 0xE9, 0x2C, 0x67, 0x1E, 0x84, 0x14, 0xD4, 0x12, 0x53, 0xC1, 0x2F,
    0xAD, 0xBF, 0x19, 0x7B, 0x63, 0x07, 0xB5, 0xBD, 0x04, 0x88, 0x13, 0x3F,
    0x89, 0x21, 0x39, 0xA1, 0x51, 0xF4, 0x73, 0x29, 0x69, 0x97, 0x02, 0xF3,
    0xCA, 0xC0, 0xB6, 0xFC, 0xC0, 0x47, 0x27, 0x43, 0x5D, 0xDD, 0xD7, 0x2C,
    0xB7, 0xAE, 0x07, 0x31, 0xF9, 0xDA, 0xF1, 0x2D, 0x37, 0xA7, 0x7E, 0xC5,
    0x48, 0x63, 0x4F, 0x3C, 0xFF, 0xAC, 0x3D, 0x43, 0x95, 0xE9, 0x89, 0x1D,
    0xC7, 0x65, 0xE5, 0x9A, 0xA9, 0x62, 0xAE, 0xF2, 0x0C, 0x2D, 0x8E, 0xE5,
    0x62, 0xE8, 0x94, 0xBC, 0xD7, 0x2A, 0x07, 0x34, 0x45, 0x4F, 0x3D, 0xD0,
    0x00, 0xAF, 0xE8, 0x46, 0x15, 0x7D, 0x65, 0x52, 0xD3, 0x45, 0x23, 0x02,
    0x52, 0x43, 0x06, 0x59, 0x9E, 0x6D, 0x09, 0x78, 0x94, 0x0F, 0x71, 0x88,
    0x9A, 0xEC, 0x39, 0xFC, 0x90, 0x96, 0x8C, 0x9F, 0x70, 0x2B, 0xD1, 0x29,
    0xEB, 0x39, 0x69, 0x29, 0x84, 0x7B, 0xF9, 0xC9, 0x50, 0x55, 0xB5, 0x7B,
    0xA0, 0x0A, 0x96, 0x59, 0xBF, 0x6A, 0x0E, 0xCE, 0x85, 0x1A, 0xDA, 0xA9,
    0xAC, 0x54, 0xE2, 0x9F, 0x26, 0x93, 0x5F, 0xBC, 0x6A, 0x74, 0xED, 0xF8,
    0x12, 0x11, 0xCB, 0xD5, 0x35, 0x30, 0x88, 0x23, 0x0E, 0x58, 0x8F, 0x8F,
    0xCA, 0x9F, 0x00, 0xC7, 0x14, 0xCF, 0xCA, 0xED, 0x0A, 0xDE, 0x9A, 0x3B,
    0xC4, 0x2F, 0xF5, 0x0F, 0x55, 0xE4, 0x5B, 0x9B, 0xA4, 0x99, 0xF3, 0x7B,
    0x7F, 0x3E, 0x04, 0x3B, 0xBC, 0xBE, 0x0E, 0xFB, 0xDA, 0xB2, 0x36, 0x16,
    0x25, 0x19, 0x3F, 0x19, 0x30, 0x27, 0xB4, 0xFA, 0x9E, 0x8E, 0xD5, 0x61,
    0xB3, 0x2F, 0x4F, 0x2F, 0x27, 0x01, 0xB6, 0x87, 0xC8, 0xB1, 0xA9, 0x08,
    0xBA, 0x58, 0xB0, 0xBC, 0x39, 0xCD, 0xE3, 0x85, 0xF8, 0x1C, 0x80, 0xD6,
    0x86, 0x47, 0x50, 0x5A, 0xE6, 0xD6, 0xFB, 0x02, 0xF8, 0x06, 0xF1, 0x83,
    0xF7, 0x0F, 0xB9, 0x7F, 0x95, 0x41, 0x9D, 0xF3, 0x35, 0x03, 0xEA, 0x1F,
    0x05, 0xC5, 0x97, 0xDE, 0x3F, 0x67, 0x30, 0x7A, 0xEA, 0x21, 0x64, 0x2A,
    0xC0, 0x4F, 0xF6, 0x70, 0xB7, 0x9C, 0xDF, 0x8C, 0x2B, 0x3B, 0x16, 0x44,
    0xB3, 0xF7, 0xA0, 0x06, 0x75, 0xDA, 0x25, 0xD4, 0x91, 0xA2, 0xBA, 0x20,
    0x41, 0x57, 0x8B, 0xFB, 0x80, 0x0E, 0x6C, 0x6C, 0x62, 0xD5, 0x67, 0x47,
    0x73, 0xB6, 0x86, 0xB1, 0xD7, 0x3A, 0x97, 0xC7, 0x77, 0x7C, 0xE0, 0x33,
    0xC8, 0x7C, 0xAD, 0xD4, 0x9D, 0xFA, 0xAB, 0x62, 0xA9, 0x72, 0xDA, 0x40,
    0xAA, 0x1D, 0xA0, 0x4B, 0x0A, 0x7E, 0x53, 0x57, 0x95, 0xCC, 0x93, 0x85,
    0xA5, 0x05, 0xAF, 0x26, 0x4E, 0x12, 0x40, 0xAF, 0x20, 0x1E, 0x8F, 0x8F,
    0x76, 0xA8, 0x22, 0x01, 0x2A, 0xF0, 0x82, 0xDB, 0xBE, 0xCB, 0xA5, 0x2F,
    0x97, 0x7E, 0x9B, 0x85, 0x25, 0x31, 0xA2, 0x51, 0x30, 0x9B, 0x1A, 0x7E,
    0x2F, 0xEA, 0xF0, 0x77, 0x83, 0x53, 0xF6, 0xDB, 0x97, 0xF2, 0x2E, 0x6B,
    0x48, 0x65, 0x7C, 0xE5, 0x86, 0x2C, 0x56, 0x43, 0x54, 0x07, 0x5F, 0xE4,
    0xF0, 0xA5, 0x0C, 0x69, 0x3B, 0xD0, 0x50, 0x68, 0xE5, 0xF9, 0xD6, 0x7A,
    0xCF, 0x22, 0x4E, 0x8A, 0x71, 0x30, 0x29, 0x7B, 0xE9, 0x01, 0xF3, 0x98,
    0xF5, 0x9D, 0x30, 0x73, 0x72, 0x24, 0x36, 0xDD, 0xE7, 0x6D, 0x59, 0x9A,
    0xE8, 0x45, 0x7C, 0x3E, 0xBA, 0x9D, 0x8D, 0x58, 0xBC, 0x31, 0xCB, 0xC6,
    0x40, 0x2C, 0xD5, 0x32, 0x88, 0xF3, 0x24, 0x28, 0x7D, 0x3F, 0xBE, 0x22,
    0x50, 0x5B, 0x0D, 0xAC
};

        public static byte[] dataD = {
    0xA7, 0xA8, 0x0C, 0x3B, 0x26, 0x06, 0x89, 0xE3, 0x83, 0xCC, 0xB9, 0xA5,
    0x43, 0x77, 0x72, 0xD9, 0x5C, 0x49, 0xE8, 0x63, 0x4C, 0x64, 0xEA, 0x25,
    0xAE, 0xCC, 0x31, 0x50, 0xA4, 0x04, 0xC0, 0xC8, 0xE5, 0x0E, 0x9E, 0xEB,
    0x58, 0x44, 0x5A, 0x87, 0xE7, 0xCA, 0x71, 0x15, 0xF5, 0x22, 0xEB, 0xA9,
    0x0C, 0xB8, 0xA5, 0xC5, 0x56, 0x69, 0x05, 0xCC, 0xD8, 0x9B, 0x48, 0x21,
    0xF3, 0x2C, 0x40, 0xF6, 0xCA, 0x19, 0x22, 0xFE, 0xAB, 0x10, 0x8A, 0xEE,
    0x77, 0x58, 0x06, 0x4E, 0x46, 0x1C, 0x8B, 0xCB, 0x8B, 0x5B, 0xBD, 0x50,
    0xAC, 0x76, 0xC6, 0xB8, 0x4E, 0x80, 0x4A, 0x9F, 0x0C, 0xD1, 0x70, 0x39,
    0x0D, 0xFF, 0xDB, 0x02, 0xFF, 0x52, 0xDF, 0x45, 0xF0, 0xFE, 0xC2, 0x61,
    0x80, 0xB1, 0x4A, 0x26, 0x6F, 0x45, 0x70, 0xC4, 0x75, 0x8C, 0x1C, 0x31,
    0xE0, 0x3C, 0x6D, 0x89, 0xF4, 0xF5, 0x5A, 0x32, 0x70, 0xA4, 0x09, 0x14,
    0xDF, 0x79, 0x7A, 0x4C, 0x4E, 0x6B, 0xDE, 0xC6, 0x8D, 0x49, 0xAB, 0x82,
    0x76, 0x75, 0x52, 0x1E, 0x2C, 0xBC, 0xF3, 0x33, 0x9B, 0x96, 0x6B, 0xFC,
    0x00, 0x86, 0x88, 0x1C, 0x42, 0x6E, 0xA0, 0xDF, 0xB2, 0x2D, 0x70, 0xAC,
    0xFE, 0xFF, 0x79, 0xC7, 0x39, 0x0D, 0xE9, 0x3D, 0xE7, 0x33, 0x1D, 0xED,
    0xB2, 0xC7, 0x27, 0x9D, 0x8C, 0x5E, 0x62, 0x93, 0x2D, 0x7F, 0x13, 0xA6,
    0x77, 0xAA, 0x7A, 0x29, 0x5D, 0xA1, 0x34, 0xD8, 0xF6, 0x49, 0x4E, 0x0C,
    0xBA, 0x70, 0x0C, 0xBB, 0x9D, 0x89, 0x0A, 0x0F, 0xE9, 0x18, 0xCE, 0xC3,
    0xBD, 0x85, 0x83, 0x6A, 0x14, 0xE5, 0x72, 0xDA, 0xEB, 0xB9, 0xEF, 0x7C,
    0x21, 0x5B, 0xC2, 0x9F, 0x96, 0xD6, 0x1D, 0x77, 0x5D, 0xEA, 0xE5, 0xE7,
    0x74, 0x88, 0x6C, 0xB4, 0xCE, 0xC5, 0x03, 0x29, 0xF0, 0xD0, 0x6F, 0xE4,
    0x42, 0xC0, 0x1B, 0x77, 0xA0, 0x8E, 0x4F, 0x7A, 0x61, 0xE8, 0xDF, 0xA2,
    0x19, 0xB2, 0xAA, 0x0E, 0x38, 0x14, 0x0E, 0xCB, 0x32, 0x73, 0x9D, 0x9B,
    0x23, 0x31, 0x6B, 0xC9, 0xAF, 0x56, 0x50, 0xF4, 0x62, 0x8F, 0x1A, 0x93,
    0xA0, 0x01, 0x28, 0x82, 0x38, 0xF3, 0x88, 0x90, 0xB2, 0xC8, 0x69, 0xA8,
    0xFF, 0x15, 0x0A, 0xB6, 0xFF, 0x47, 0x9F, 0xF9, 0x39, 0x61, 0xA6, 0xBB,
    0xF3, 0x7A, 0xE0, 0x6F, 0x37, 0x7A, 0x43, 0xAD, 0x51, 0x55, 0x91, 0x71,
    0xD8, 0x7A, 0x34, 0xE0, 0x5D, 0x85, 0x6E, 0x25, 0x2A, 0x6A, 0x95, 0x44,
    0xF0, 0x2A, 0xC9, 0x86, 0x07, 0x4F, 0xE4, 0x54, 0x2A, 0xB4, 0x1F, 0x70,
    0x4F, 0x16, 0x7D, 0x5A, 0x4D, 0xA2, 0xC1, 0x05, 0x12, 0x3E, 0x7E, 0xCA,
    0x60, 0xC7, 0x69, 0xA0, 0x80, 0x8A, 0x54, 0x7E, 0xE6, 0x60, 0xC5, 0x06,
    0xDC, 0xA0, 0x08, 0x87, 0xF8, 0x36, 0x3D, 0x32, 0x15, 0x75, 0x94, 0x01,
    0x49, 0x3A, 0xD1, 0xED, 0x6F, 0xB5, 0xB0, 0x30, 0x93, 0x2A, 0xBF, 0x37,
    0x40, 0x5F, 0xE3, 0xAA, 0x21, 0x8C, 0x44, 0x2A, 0xDC, 0xC5, 0x1F, 0x19,
    0xAF, 0xFC, 0x32, 0x0B, 0x33, 0x59, 0xE8, 0x9E, 0x38, 0xA9, 0x88, 0x9A,
    0x3E, 0x4B, 0xB3, 0x2C, 0xF8, 0xF8, 0xD7, 0xFA, 0xBB, 0x58, 0x52, 0x1C,
    0xFB, 0x83, 0x5C, 0x95, 0x99, 0xDE, 0x0D, 0xAA, 0xDC, 0x89, 0x08, 0xC1,
    0x73, 0xD3, 0xCE, 0xBC, 0x89, 0x26, 0x56, 0xFA, 0xF7, 0x0F, 0xF5, 0xAC,
    0x96, 0x6F, 0xA8, 0x19, 0xD6, 0x05, 0x39, 0x42, 0xE6, 0x92, 0x9D, 0xB7,
    0x93, 0xDC, 0x51, 0x45, 0x55, 0x05, 0x08, 0x60, 0xFD, 0x17, 0x32, 0x95,
    0x29, 0x47, 0xE8, 0x91, 0xD8, 0x0A, 0x77, 0x7E, 0xFB, 0x00, 0x28, 0xD5,
    0x39, 0x9D, 0xE2, 0xDB, 0xB3, 0x4A, 0xA0, 0xBC, 0x12, 0xFB, 0x7E, 0x93,
    0xD0, 0xE0, 0xD9, 0xC4, 0x35, 0x65, 0x17, 0xEE, 0x16, 0x51, 0x12, 0xB3,
    0x60, 0x03, 0xC0, 0xDE, 0xDA, 0xFA, 0xF9, 0x74, 0x83, 0xEB, 0x5D, 0x5B,
    0x7C, 0x9E, 0xBC, 0xDC, 0xBD, 0x52, 0xD3, 0xCF, 0x9D, 0xFD, 0x85, 0x8D,
    0x4F, 0x19, 0xD1, 0xE8, 0x1D, 0xFA, 0x4B, 0xBC, 0x0F, 0x66, 0x43, 0x95,
    0xD1, 0xF1, 0x71, 0x17, 0x59, 0xA8, 0xB7, 0x1B, 0xDB, 0x11, 0x7C, 0xEB,
    0xB0, 0x32, 0xAD, 0x1C, 0x0A, 0xBC, 0x44, 0x96, 0x27, 0x5D, 0x21, 0x09,
    0x6C, 0xA6, 0xD2, 0xEC, 0x99, 0x76, 0xA9, 0x7E, 0xB4, 0x3C, 0xFF, 0x3B,
    0xA3, 0x1B, 0x0B, 0xDA, 0x3F, 0xD3, 0x3E, 0x80, 0xFD, 0x1B, 0xF9, 0x44,
    0x8A, 0x4D, 0xD7, 0x58, 0xAA, 0x9C, 0xBC, 0x56, 0x54, 0xBA, 0x83, 0xE5,
    0xB7, 0x8D, 0x78, 0x11, 0xDE, 0xE8, 0x69, 0xBD, 0x14, 0xB9, 0x77, 0x7D,
    0x4C, 0x4F, 0xBE, 0x8D, 0xF9, 0x30, 0x86, 0x47, 0xF8, 0xCF, 0x29, 0x90,
    0xE6, 0x9D, 0x40, 0x8A, 0x20, 0x89, 0x33, 0x70, 0xE2, 0xC4, 0x03, 0xEC,
    0x18, 0xC6, 0x5D, 0x55, 0x50, 0x47, 0xB5, 0xD2, 0x29, 0xD7, 0xDE, 0x07,
    0xF2, 0x93, 0x06, 0xE6, 0x8F, 0x60, 0x7C, 0x63, 0x49, 0x27, 0xAA, 0x0A,
    0xD8, 0x23, 0xE0, 0xFF, 0xA8, 0xC0, 0x97, 0x1D, 0x5E, 0xF2, 0xEF, 0x7E,
    0x20, 0x5F, 0xD1, 0x51, 0x13, 0x9A, 0xEC, 0xA3, 0x57, 0x83, 0x39, 0xC3,
    0x04, 0x61, 0xD6, 0xAA, 0x61, 0x94, 0x21, 0x1B, 0xFF, 0xD8, 0x73, 0xF7,
    0xC8, 0xAB, 0x11, 0x9D, 0xD2, 0x80, 0x9A, 0x68, 0xBD, 0xE3, 0xE8, 0x8E,
    0x80, 0xAA, 0xED, 0x89, 0x35, 0xE5, 0x08, 0x9E, 0x84, 0x5C, 0x20, 0x81,
    0x5C, 0xA7, 0x4E, 0x18, 0x9E, 0x32, 0x72, 0x95, 0xDF, 0x6F, 0xF8, 0x94,
    0x12, 0x40, 0x40, 0x6D, 0x1F, 0xEA, 0x37, 0x0E, 0xB3, 0xBF, 0x13, 0x8E,
    0x54, 0x1F, 0xB3, 0x82, 0x3D, 0xE3, 0xB9, 0xCE, 0x71, 0x1F, 0xCF, 0x54,
    0x7E, 0x56, 0x70, 0xA8, 0x1B, 0xCD, 0x01, 0xD4, 0xBE, 0xF5, 0x39, 0x65,
    0xAD, 0x68, 0x2F, 0x10, 0xCA, 0xC5, 0x4E, 0xCE, 0x9E, 0xDF, 0xDE, 0x11,
    0x88, 0x67, 0xDF, 0x9F, 0xF8, 0xB5, 0x4B, 0x98, 0xF9, 0x46, 0x17, 0xCF,
    0xC4, 0xBC, 0x9F, 0xE4, 0xE3, 0x18, 0xF8, 0x40, 0xA9, 0x05, 0x76, 0x90,
    0xDF, 0x52, 0xFD, 0x32, 0x64, 0xCD, 0xA4, 0x89, 0x13, 0x53, 0x26, 0x6F,
    0x1A, 0x30, 0x79, 0xC2, 0xA3, 0x1B, 0xC2, 0x6A, 0x46, 0xBD, 0x9F, 0xD4,
    0x47, 0x44, 0x0B, 0x43, 0x01, 0xD2, 0xA2, 0x2D, 0x5E, 0xE3, 0x83, 0xF3,
    0x4B, 0x46, 0xE1, 0x95, 0x81, 0x48, 0xB3, 0x68, 0xBE, 0xB0, 0xD6, 0xBC,
    0xDA, 0x33, 0x16, 0x10, 0x08, 0xCC, 0x3B, 0x97, 0x1E, 0x07, 0x2E, 0xFC,
    0xFE, 0xF2, 0xAB, 0x9B, 0x4A, 0x44, 0x54, 0xB2, 0xFD, 0x97, 0x15, 0xF8,
    0xB3, 0x69, 0xFD, 0xDB, 0xBE, 0x89, 0xD1, 0x42, 0x56, 0xB8, 0xE4, 0x87,
    0x62, 0x19, 0xBC, 0xB6, 0x34, 0xBD, 0x01, 0xA0, 0x6D, 0xE8, 0x26, 0x09,
    0xC4, 0x57, 0xEF, 0x76, 0x31, 0x86, 0xAD, 0xC2, 0xE1, 0xE4, 0xCA, 0x0D,
    0xF0, 0xFF, 0x97, 0xB2, 0x44, 0x11, 0x78, 0x98, 0xFA, 0x69, 0xFE, 0xF1,
    0x9A, 0xB3, 0xE9, 0xDA, 0xFE, 0x1A, 0x09, 0x71, 0xC8, 0x0B, 0x94, 0x7E,
    0x12, 0xCB, 0xB5, 0x78, 0xFA, 0xA5, 0x1E, 0x60, 0x28, 0xDA, 0x6F, 0xBA,
    0xA9, 0x7B, 0xEC, 0x8C, 0xE8, 0x25, 0x97, 0xE8, 0xD3, 0x57, 0x79, 0x58,
    0xFA, 0x04, 0x33, 0x9D, 0x60, 0xE9, 0x8F, 0x0B, 0x06, 0x0B, 0xB4, 0xA4,
    0x21, 0x79, 0x3D, 0xE2, 0xE0, 0xDC, 0x20, 0x52, 0xC3, 0xEE, 0x7E, 0x05,
    0x78, 0xC3, 0x2C, 0x45, 0x12, 0x54, 0xD2, 0x84, 0x1E, 0xF0, 0x77, 0xD3,
    0x63, 0xD4, 0x18, 0xD1, 0x65, 0x7E, 0x7D, 0xF5, 0xEF, 0xC9, 0xC7, 0xFF,
    0x58, 0x17, 0x3B, 0xC7
};

        public static byte[] dataC = {
    0x99, 0xB9, 0x1C, 0x04, 0x94, 0x3E, 0x62, 0x1F, 0x87, 0x91, 0x94, 0x96,
    0x04, 0x9A, 0xE2, 0xF2, 0x35, 0xCF, 0xFA, 0x0E, 0x71, 0xD7, 0x12, 0x53,
    0x7F, 0x4A, 0x4E, 0x48, 0x1E, 0x3B, 0xFF, 0x74, 0x7C, 0xC4, 0x93, 0x7B,
    0xD5, 0x9C, 0xE5, 0x9F, 0x21, 0x71, 0x41, 0x85, 0x85, 0xBC, 0xCB, 0xFF,
    0xC3, 0xA1, 0x93, 0xC4, 0xF4, 0x5F, 0x9B, 0xF6, 0xA3, 0xA4, 0xCA, 0x9F,
    0x6D, 0x98, 0xA1, 0x99, 0x58, 0x05, 0x1E, 0x9A, 0x29, 0xC7, 0x4F, 0x17,
    0x6A, 0x0A, 0x84, 0xAA, 0x01, 0xC5, 0x4E, 0x46, 0xBD, 0x21, 0x52, 0xFD,
    0xA4, 0xBA, 0x53, 0x12, 0x78, 0xFE, 0xBD, 0x58, 0x39, 0x36, 0x4B, 0x36,
    0xA4, 0x77, 0x20, 0xA4, 0x2E, 0xB5, 0xDC, 0x95, 0x12, 0x74, 0x69, 0xBC,
    0x58, 0x41, 0x0C, 0xB9, 0x73, 0x81, 0xBB, 0x20, 0x28, 0xF3, 0xEE, 0xE7,
    0x23, 0x17, 0x15, 0x54, 0x2B, 0x68, 0xC3, 0x7C, 0x9C, 0x34, 0xAB, 0x8B,
    0xA4, 0x7A, 0x4C, 0x37, 0xB9, 0x32, 0x04, 0xE4, 0xB7, 0x22, 0x97, 0xD7,
    0x5F, 0x4E, 0x02, 0xEB, 0x6C, 0x95, 0x20, 0xFB, 0x6B, 0x99, 0xA4, 0x6C,
    0xEB, 0x37, 0x0E, 0xBC, 0x40, 0x72, 0x64, 0xF2, 0x50, 0x51, 0x4D, 0x84,
    0x99, 0x79, 0x6B, 0x9D, 0xE7, 0x2E, 0x21, 0x28, 0x74, 0xF9, 0x1F, 0xCD,
    0x07, 0xF1, 0x3B, 0x1A, 0xEE, 0x0F, 0xE5, 0x7B, 0x88, 0x8F, 0x54, 0xEA,
    0x45, 0xF0, 0x8C, 0x10, 0xE9, 0x65, 0x0B, 0xD9, 0x76, 0x44, 0x2F, 0x42,
    0xA9, 0xB4, 0x37, 0xC6, 0x94, 0x07, 0xE4, 0x8E, 0x2C, 0x65, 0x72, 0xED,
    0xDC, 0x23, 0x3A, 0xDE, 0xEE, 0x9B, 0xE6, 0xEF, 0x42, 0x57, 0x7F, 0x67,
    0x36, 0xEC, 0x54, 0x5F, 0x6A, 0x1B, 0x37, 0x3A, 0x14, 0x9B, 0xFF, 0x2C,
    0x74, 0x73, 0x33, 0x49, 0x3F, 0x38, 0x5C, 0xBA, 0xA2, 0x42, 0xAF, 0x05,
    0xE3, 0xFF, 0xD5, 0x31, 0x72, 0xC5, 0x72, 0xF8, 0x12, 0x66, 0x9C, 0x92,
    0xCD, 0x11, 0xBC, 0x96, 0x21, 0x98, 0x2F, 0x34, 0x31, 0xC6, 0x8E, 0xA2,
    0x68, 0xB4, 0x77, 0x6E, 0x33, 0x85, 0xB1, 0xF0, 0x3C, 0x06, 0xD4, 0x14,
    0xE2, 0x04, 0x6E, 0x8E, 0x7E, 0x2B, 0x90, 0x1E, 0x73, 0x68, 0xDE, 0x37,
    0x2E, 0x8C, 0x04, 0x5C, 0x04, 0xF4, 0xAA, 0x90, 0x0B, 0x94, 0x2F, 0x36,
    0xF7, 0xD5, 0xB0, 0xBB, 0x78, 0x70, 0x25, 0x83, 0x89, 0x38, 0x9D, 0xCC,
    0x79, 0xED, 0x16, 0xB0, 0x60, 0x41, 0xE5, 0xFF, 0x74, 0x44, 0x95, 0x71,
    0xC4, 0x44, 0x10, 0xD6, 0xF9, 0x5E, 0xBB, 0x0E, 0x13, 0x67, 0xCF, 0x60,
    0x23, 0x05, 0xC6, 0xBC, 0xA4, 0x81, 0xA4, 0xB2, 0x39, 0xB2, 0xC3, 0xEE,
    0xB9, 0x67, 0x53, 0x7D, 0x34, 0x55, 0x3C, 0xA0, 0x5D, 0xEB, 0x64, 0x37,
    0x34, 0x45, 0xF1, 0x31, 0x73, 0x71, 0x46, 0x57, 0x50, 0xC4, 0x43, 0x02,
    0x18, 0x23, 0xF6, 0x95, 0x42, 0x84, 0x23, 0x2F, 0xD4, 0xD5, 0x63, 0x09,
    0xD4, 0x95, 0x82, 0xE5, 0x7D, 0xD7, 0x6F, 0x47, 0xA8, 0x48, 0xC8, 0x5E,
    0xCE, 0x5D, 0x1C, 0x75, 0xF1, 0x30, 0x1E, 0x5A, 0x1A, 0xF7, 0x80, 0x37,
    0x42, 0x01, 0x12, 0xE7, 0x82, 0xE7, 0xF2, 0xE7, 0x7C, 0x50, 0xE1, 0x9B,
    0x4E, 0x58, 0xDF, 0x97, 0x15, 0x26, 0x53, 0xA3, 0xD6, 0xC3, 0x9D, 0x36,
    0x0B, 0xEE, 0x8E, 0x7D, 0xC7, 0xE0, 0xC9, 0x5F, 0x3B, 0x75, 0xB0, 0xFC,
    0x51, 0x9C, 0x19, 0xEF, 0xF7, 0xD8, 0x38, 0xA0, 0x23, 0xF5, 0x90, 0x12,
    0xFF, 0xA1, 0xA4, 0x16, 0x12, 0xD7, 0x55, 0x7B, 0x4F, 0xDC, 0xFE, 0xC8,
    0xE8, 0xEC, 0xD9, 0x83, 0xD2, 0xCC, 0x57, 0x49, 0xD7, 0xD3, 0x1E, 0xC6,
    0x3F, 0xCD, 0x53, 0x24, 0x83, 0x7F, 0x6D, 0x03, 0xC9, 0x66, 0x2B, 0xE3,
    0x24, 0x2A, 0x6D, 0x0A, 0x10, 0xE1, 0x21, 0x04, 0x6F, 0x4A, 0x48, 0x3D,
    0x20, 0x5A, 0xA4, 0x76, 0x4B, 0xDD, 0x92, 0xA7, 0xCE, 0x75, 0xDC, 0xFC,
    0xAE, 0x29, 0xC3, 0x2C, 0x4D, 0x4C, 0xED, 0x48, 0xF7, 0xA2, 0xCB, 0x69,
    0x12, 0xB0, 0xD8, 0x06, 0x47, 0x1C, 0x73, 0x39, 0x3E, 0x35, 0xC4, 0x98,
    0xD8, 0x97, 0xA1, 0x83, 0xD7, 0xD1, 0x67, 0x50, 0xED, 0x1E, 0x9D, 0x50,
    0x67, 0x81, 0xB0, 0x61, 0x8D, 0x3D, 0x77, 0xED, 0x9E, 0x39, 0x41, 0xC3,
    0xB4, 0xC8, 0x5A, 0xCE, 0xFB, 0xC8, 0x78, 0x58, 0xC5, 0xC9, 0x45, 0x4A,
    0x67, 0xD2, 0x2A, 0x38, 0x15, 0xCB, 0x37, 0x07, 0x5C, 0x54, 0x5E, 0x6F,
    0xF6, 0x97, 0xA8, 0xB5, 0x56, 0x97, 0xB9, 0x44, 0x6C, 0xE3, 0x0E, 0xD3,
    0x85, 0x54, 0x4C, 0x55, 0xC6, 0x90, 0x97, 0xAA, 0x7A, 0xE4, 0x09, 0x9C,
    0x3E, 0x14, 0x88, 0x67, 0x51, 0x9F, 0xAE, 0x4A, 0x2A, 0xB3, 0x5C, 0x84,
    0xA0, 0x99, 0xAB, 0x66, 0x9C, 0xDD, 0x3F, 0x8E, 0xFF, 0x34, 0x6C, 0x4D,
    0x81, 0x56, 0x02, 0xC9, 0x44, 0x05, 0x54, 0x6A, 0x2A, 0x57, 0x61, 0xE5,
    0x83, 0x1E, 0x09, 0x79, 0xA1, 0xAF, 0x3A, 0xE1, 0x0E, 0x23, 0xE5, 0x77,
    0x46, 0xAD, 0x73, 0x6E, 0xED, 0x87, 0x07, 0x7C, 0x55, 0x6A, 0x0E, 0x1F,
    0x05, 0xCB, 0xAC, 0xEC, 0xC4, 0x9C, 0xE9, 0x9B, 0x50, 0x90, 0x3B, 0x76,
    0xAD, 0xFA, 0x5F, 0xBC, 0x2A, 0xDC, 0xA2, 0x69, 0xD8, 0x84, 0x0E, 0xC8,
    0x8C, 0xEC, 0x7B, 0x17, 0x1F, 0xE7, 0x17, 0x98, 0xDB, 0x5D, 0x49, 0xD4,
    0xC4, 0x5C, 0x62, 0x42, 0xBA, 0xA0, 0x3F, 0x41, 0x1F, 0xA3, 0x2A, 0x52,
    0x67, 0x03, 0x25, 0xF3, 0xA9, 0xCF, 0xDC, 0x2D, 0x77, 0x74, 0xF5, 0xF1,
    0x03, 0x50, 0x3E, 0xAE, 0x5E, 0xB2, 0xD2, 0x5F, 0x33, 0x7C, 0x09, 0x3B,
    0x26, 0x09, 0xC7, 0xD3, 0x48, 0x54, 0x28, 0x01, 0x37, 0x41, 0x29, 0x1A,
    0x2D, 0xBE, 0x9B, 0x72, 0x1F, 0x38, 0xFE, 0x8D, 0x2B, 0x8C, 0x78, 0x43,
    0x34, 0x16, 0xE4, 0x91, 0x3E, 0xF0, 0x64, 0x85, 0xB9, 0xF9, 0x24, 0xEA,
    0x22, 0x19, 0xC2, 0x22, 0x2B, 0xE1, 0x45, 0xE1, 0x2D, 0x3E, 0x5D, 0x48,
    0xA4, 0x76, 0x5C, 0x8F, 0x51, 0x4A, 0x33, 0x18, 0x75, 0x40, 0x06, 0xD8,
    0x82, 0xFF, 0x04, 0x8F, 0xFA, 0x4F, 0xF6, 0x2E, 0xD9, 0x95, 0x56, 0x19,
    0x22, 0xDF, 0xFA, 0xF2, 0xC3, 0xB4, 0x40, 0xB8, 0x02, 0x31, 0x4C, 0x19,
    0x92, 0x6A, 0x88, 0x01, 0x28, 0x6B, 0xBB, 0xD3, 0x0F, 0x03, 0xF9, 0x50,
    0xEF, 0xF8, 0xEE, 0x8B, 0xEC, 0xA1, 0x4E, 0xB4, 0x99, 0x48, 0x11, 0x28,
    0x69, 0x9E, 0x9D, 0xAC, 0x3F, 0x4B, 0x8D, 0x46, 0x7C, 0xBF, 0x28, 0x1A,
    0x05, 0xFF, 0xFC, 0x94, 0x8A, 0xDC, 0xFF, 0x26, 0x67, 0x69, 0x29, 0x10,
    0x1A, 0x65, 0x34, 0x7D, 0x7C, 0xA1, 0xE7, 0x5C, 0xEF, 0x35, 0xAE, 0x61,
    0x3A, 0x39, 0xDC, 0xA5, 0x81, 0xB6, 0x0A, 0x32, 0x19, 0x17, 0x32, 0x9A,
    0x89, 0xCD, 0x78, 0x5D, 0x22, 0x12, 0xBA, 0x44, 0x0B, 0x62, 0x78, 0xDC,
    0x1B, 0x59, 0x2D, 0x0B, 0x8F, 0x1F, 0x10, 0x3C, 0x14, 0x6D, 0xC8, 0xFF,
    0xF8, 0x77, 0x93, 0xF9, 0x35, 0xD1, 0x12, 0xB4, 0xC6, 0xE2, 0x29, 0x4F,
    0x9B, 0x83, 0x94, 0x38, 0x19, 0xAF, 0x2B, 0xDD, 0x55, 0xCD, 0xDA, 0x47,
    0x95, 0x05, 0x50, 0x69, 0xE7, 0x07, 0x23, 0x9C, 0x28, 0x77, 0x08, 0x2B,
    0x48, 0x70, 0x0B, 0x98, 0x32, 0x73, 0x10, 0xEE, 0x67, 0xF7, 0x2B, 0x78,
    0x93, 0xF8, 0x5D, 0x35, 0x68, 0x36, 0x8B, 0x3E, 0x5A, 0x53, 0x32, 0x2F,
    0x7E, 0x9E, 0x87, 0x62, 0xEA, 0x8C, 0xA7, 0xCF, 0x47, 0x87, 0x17, 0xE7,
    0xF3, 0x79, 0xD2, 0xC5, 0x0B, 0xBC, 0x5F, 0xD8, 0xEA, 0x7A, 0x11, 0xC1,
    0xF0, 0xDA, 0xA9, 0xC0
};

        public static byte[] dataB = {
    0x54, 0xA0, 0x3E, 0xF9, 0xB0, 0x89, 0xD3, 0x02, 0x1E, 0x00, 0xC1, 0x68,
    0x2D, 0xD5, 0x87, 0xE3, 0x12, 0x11, 0x0A, 0x5D, 0xAC, 0xAC, 0x4E, 0xBB,
    0x8F, 0xC2, 0x81, 0x95, 0x5A, 0x6C, 0xDF, 0xB0, 0xB3, 0x4B, 0xA0, 0x52,
    0x04, 0x13, 0x2A, 0xE2, 0x13, 0x36, 0x63, 0xCC, 0x8B, 0x7F, 0x5B, 0x00,
    0x2B, 0xCB, 0x00, 0xEA, 0xEC, 0xA7, 0xD7, 0x93, 0x10, 0x0E, 0x6C, 0x87,
    0xBC, 0x9B, 0x8B, 0xBB, 0x23, 0x37, 0x5A, 0x14, 0x83, 0x2E, 0xD1, 0x41,
    0x8E, 0x3C, 0xA5, 0x8A, 0xC6, 0x10, 0xED, 0xA4, 0x85, 0x38, 0x09, 0x56,
    0xBE, 0x5F, 0xFA, 0x86, 0xEC, 0x92, 0x89, 0x34, 0xF3, 0xF1, 0x8D, 0xBC,
    0xA3, 0x66, 0xDA, 0x97, 0x92, 0xC3, 0x31, 0x83, 0x2F, 0x4D, 0x24, 0x1E,
    0x98, 0x9D, 0x41, 0xE4, 0xFD, 0xFC, 0xBF, 0x27, 0x71, 0x7D, 0xAD, 0x83,
    0xE3, 0x5F, 0x12, 0x1A, 0xDE, 0xF8, 0xF2, 0x13, 0xE1, 0x38, 0x78, 0x26,
    0x0F, 0xBA, 0x73, 0x8A, 0xA1, 0xB0, 0xFD, 0xD1, 0x4B, 0x84, 0x6A, 0xF7,
    0x03, 0xFF, 0x87, 0x5B, 0xAE, 0x8A, 0xDE, 0xAF, 0xDC, 0xD0, 0x38, 0x31,
    0xBB, 0x77, 0x9D, 0x17, 0xA6, 0x08, 0xA4, 0x47, 0xFD, 0x27, 0xAF, 0xBC,
    0x55, 0xFC, 0x46, 0x73, 0x05, 0x36, 0xBE, 0xB3, 0xAB, 0x3B, 0x7E, 0xA5,
    0x46, 0x27, 0x16, 0x56, 0x93, 0xC4, 0xBA, 0x6F, 0x55, 0xEA, 0xC7, 0x2B,
    0x8D, 0x5E, 0x90, 0xA5, 0xFD, 0xF9, 0xB4, 0xFA, 0x26, 0x5B, 0x0B, 0x43,
    0x60, 0x8A, 0x65, 0xF1, 0x38, 0x57, 0x1F, 0xF4, 0x37, 0xDA, 0x63, 0x2C,
    0x96, 0xF2, 0x30, 0x82, 0xEB, 0xB3, 0xC8, 0x25, 0x24, 0x87, 0xA6, 0x8B,
    0xDF, 0xAE, 0x22, 0x87, 0xE8, 0x35, 0x6A, 0xFF, 0x36, 0x1C, 0xD6, 0xBC,
    0xA0, 0x91, 0xE9, 0xBB, 0x6B, 0x78, 0x2B, 0x99, 0x23, 0x33, 0x6E, 0x87,
    0xE9, 0xC6, 0xD9, 0xE5, 0x58, 0x4D, 0xEE, 0xCE, 0xCA, 0x18, 0xBA, 0xAE,
    0xF2, 0xD6, 0x8C, 0x3B, 0xCB, 0x09, 0x2E, 0xAE, 0x7C, 0x7E, 0xBE, 0x40,
    0xE2, 0xAF, 0xDD, 0x01, 0xD9, 0xEE, 0x08, 0x07, 0x05, 0xF2, 0xAE, 0x19,
    0xC9, 0x11, 0x6B, 0x70, 0xCA, 0x8D, 0xD2, 0x83, 0xF6, 0xE1, 0x25, 0xB7,
    0xB1, 0x5D, 0x07, 0x6B, 0x41, 0x30, 0x6F, 0x47, 0x6E, 0x91, 0xE5, 0x6E,
    0x07, 0x57, 0xAC, 0x81, 0x3D, 0x02, 0xDC, 0xEC, 0xA9, 0x08, 0x25, 0xC0,
    0x1F, 0x49, 0x38, 0x1C, 0xB5, 0x90, 0xF8, 0xA4, 0x6F, 0xFA, 0x92, 0xC1,
    0x84, 0xE5, 0x8C, 0xDC, 0x15, 0x01, 0xBA, 0x7D, 0xD3, 0x46, 0x49, 0x56,
    0x40, 0xDE, 0x7C, 0xB8, 0xEC, 0x6D, 0xE4, 0x76, 0xF7, 0x0B, 0x64, 0xF1,
    0x8B, 0xA2, 0xA1, 0x15, 0x1D, 0x23, 0xA1, 0xE0, 0xA6, 0x2F, 0x2B, 0xC5,
    0xC6, 0x63, 0x8E, 0x62, 0x85, 0xAD, 0xF7, 0xC2, 0x68, 0x32, 0xCA, 0x87,
    0x9D, 0xAA, 0x0A, 0xC3, 0x2E, 0x51, 0xED, 0x15, 0xA2, 0x86, 0x24, 0x76,
    0x15, 0xFA, 0xEB, 0xEC, 0xC9, 0x1D, 0xA9, 0x4A, 0x82, 0xE2, 0xCB, 0x91,
    0x5E, 0xD6, 0xFA, 0x1E, 0xC2, 0xD8, 0x0E, 0xA5, 0x38, 0x6C, 0x99, 0x0B,
    0x62, 0xFC, 0x12, 0x71, 0xA7, 0x7F, 0x68, 0xEB, 0xC7, 0xFE, 0xB6, 0x91,
    0x22, 0x28, 0x02, 0x31, 0x7B, 0x19, 0x85, 0xA0, 0xB0, 0x18, 0x34, 0x28,
    0x44, 0xDE, 0x4D, 0x64, 0x9A, 0x92, 0x6E, 0xF9, 0x06, 0x81, 0xDD, 0x2E,
    0x0A, 0x4F, 0x62, 0x7E, 0x80, 0x1C, 0x30, 0xAF, 0x9E, 0xA9, 0xE6, 0x11,
    0xF5, 0x91, 0x4C, 0x4C, 0x16, 0x41, 0x78, 0x71, 0x84, 0x2B, 0x5E, 0x7F,
    0xE3, 0x64, 0x6A, 0x68, 0x8F, 0xFC, 0xA6, 0xCD, 0x73, 0xFD, 0x1E, 0x53,
    0xD8, 0xFC, 0x26, 0x78, 0x69, 0xB3, 0xC2, 0x36, 0x32, 0x44, 0xE9, 0xC2,
    0x83, 0xED, 0x73, 0x4C, 0xAC, 0x2E, 0x12, 0xE3, 0x41, 0x45, 0x6E, 0xA8,
    0x73, 0x75, 0xDA, 0xA6, 0x88, 0x72, 0x26, 0xE3, 0x6C, 0x23, 0x25, 0x65,
    0x81, 0xD9, 0xCB, 0x85, 0x97, 0x9C, 0x6F, 0x69, 0xE5, 0xEC, 0x94, 0xC1,
    0xC1, 0x2B, 0xAE, 0xFE, 0xEA, 0x58, 0x88, 0xCD, 0x42, 0x06, 0xBD, 0xC7,
    0x66, 0x2E, 0x93, 0x02, 0x87, 0xBD, 0x0F, 0x55, 0xC1, 0xFA, 0xF5, 0xE0,
    0x98, 0x95, 0xDB, 0xA7, 0x87, 0x67, 0x57, 0x4D, 0xAD, 0x5D, 0xB0, 0x71,
    0x3B, 0x8C, 0x15, 0x7C, 0x5C, 0xDE, 0xB9, 0x5F, 0xE4, 0x00, 0xAA, 0xDE,
    0x16, 0xC1, 0x80, 0x6E, 0xD7, 0xE7, 0x6F, 0xD8, 0x4D, 0xEC, 0xF1, 0x8A,
    0xD5, 0x7D, 0x72, 0x23, 0x36, 0xC5, 0x3E, 0x56, 0x85, 0xBF, 0x96, 0x32,
    0x8E, 0x6E, 0xCE, 0x09, 0xF0, 0x8D, 0xBD, 0x5A, 0x94, 0xB3, 0x2E, 0x6B,
    0x3A, 0x7D, 0x2F, 0x6A, 0x15, 0x5D, 0x69, 0xDB, 0xD1, 0x7D, 0x3F, 0x51,
    0x35, 0x9F, 0xE9, 0x46, 0x17, 0x31, 0xBC, 0x22, 0x0A, 0x83, 0x73, 0x13,
    0xC2, 0x0A, 0x34, 0xAC, 0xE2, 0x38, 0xEA, 0xDF, 0x05, 0x58, 0x99, 0x77,
    0x48, 0x12, 0x62, 0x71, 0x1A, 0xCC, 0x46, 0x5B, 0x56, 0xCE, 0x87, 0xE2,
    0x77, 0x0C, 0x9F, 0x60, 0x4C, 0x7A, 0xE5, 0x3C, 0x22, 0x43, 0x8C, 0x93,
    0x35, 0xD9, 0x49, 0x31, 0x9A, 0x6E, 0xAD, 0xF4, 0xEA, 0xEE, 0xF0, 0xE4,
    0x1E, 0x06, 0x80, 0x9C, 0xC1, 0x18, 0x33, 0x24, 0x36, 0x0C, 0x6B, 0x3F,
    0xF5, 0x9F, 0x9B, 0xE4, 0x83, 0x33, 0x12, 0x7B, 0x84, 0x7E, 0xF1, 0x71,
    0xA3, 0xC9, 0x97, 0x9C, 0xEF, 0xB0, 0xB6, 0xE9, 0xEE, 0x02, 0xB4, 0xBA,
    0xF2, 0xE8, 0xA9, 0xA7, 0x8E, 0x5E, 0x23, 0xE6, 0x1F, 0x11, 0xD6, 0x2D,
    0x5F, 0x82, 0xC9, 0x91, 0x27, 0x37, 0xEE, 0x16, 0xDC, 0xE3, 0xE6, 0x87,
    0xC4, 0x1A, 0x53, 0x43, 0x4F, 0x8B, 0x30, 0x66, 0xB9, 0x99, 0xB6, 0xE3,
    0xF9, 0x4A, 0x27, 0xBF, 0x5B, 0x2D, 0xF1, 0x9A, 0x53, 0x0D, 0x35, 0x31,
    0x7B, 0xDA, 0x43, 0xE9, 0xB9, 0xA2, 0x26, 0xE8, 0x5A, 0x75, 0x38, 0xB3,
    0x48, 0x5C, 0xEB, 0x19, 0x1B, 0x58, 0xB8, 0x15, 0x0E, 0x30, 0x32, 0x99,
    0xBF, 0x83, 0x91, 0xA7, 0x6E, 0xC7, 0x09, 0x00, 0xBC, 0xFC, 0xD6, 0xE6,
    0x01, 0xA4, 0x60, 0xAA, 0xEE, 0xBF, 0x50, 0xA9, 0x08, 0xC0, 0x06, 0xCE,
    0xFB, 0xBA, 0x71, 0xBF, 0xB6, 0x51, 0x24, 0x18, 0x7F, 0xDE, 0xB7, 0xBD,
    0x1A, 0xF7, 0xFB, 0xFC, 0x52, 0x80, 0x33, 0xAE, 0x61, 0x55, 0x1F, 0x54,
    0xFA, 0x0D, 0x30, 0x58, 0xBE, 0xD0, 0xA3, 0xF8, 0x3B, 0x14, 0x25, 0x05,
    0x04, 0xFF, 0x3B, 0xCA, 0x31, 0xB3, 0x89, 0x82, 0x80, 0x26, 0x6B, 0x40,
    0x72, 0x30, 0x81, 0xBE, 0x6C, 0xC0, 0xB6, 0xB5, 0xA9, 0xAD, 0xF6, 0xF4,
    0x7A, 0x22, 0x1F, 0x3D, 0xD7, 0x9B, 0x2A, 0x6C, 0x7B, 0xFC, 0x76, 0x94,
    0x26, 0x59, 0xC2, 0xAA, 0x15, 0x78, 0x5F, 0x45, 0x3D, 0x0F, 0x16, 0x5F,
    0xBB, 0x01, 0x27, 0xCB, 0xE5, 0xB6, 0xAD, 0x24, 0xE8, 0xD1, 0xE7, 0xA4,
    0xEF, 0x0D, 0x4A, 0xBB, 0x2F, 0xF1, 0x56, 0xB8, 0x39, 0x2D, 0xBB, 0xFA,
    0x65, 0x85, 0x81, 0x1B, 0xF2, 0x9F, 0x10, 0xD4, 0x8C, 0x28, 0x95, 0xA9,
    0xB6, 0x86, 0xF7, 0x12, 0xD1, 0x07, 0x79, 0x13, 0xCE, 0xF0, 0x34, 0x6E,
    0x40, 0x15, 0x89, 0xE3, 0x62, 0xD8, 0xA3, 0xF9, 0xDD, 0x13, 0x64, 0xC4,
    0xF2, 0x7E, 0xFD, 0x44, 0x5D, 0x1A, 0x4D, 0x01, 0xF4, 0x8A, 0x47, 0x7B,
    0x5D, 0xD5, 0x26, 0xD4, 0x35, 0x88, 0x5C, 0x32, 0x8E, 0x28, 0x30, 0xE2,
    0xBA, 0xDF, 0x83, 0x7F, 0x1A, 0xBD, 0x93, 0x79, 0x0B, 0x9D, 0xE3, 0x3C,
    0x62, 0xDF, 0xE5, 0xB0, 0x53, 0xC0, 0x6E, 0xFD, 0x33, 0x07, 0x08, 0x57,
    0x0D, 0x06, 0x73, 0xDC
};

        public static byte[] Decrypt(byte[] data, uint key)
        {
            uint t_key = key;
            uint a = 0;
            List<byte> output = new List<byte>();
            for (int i = 0; i < data.Length; i += 4)
            {
                uint iv = GetIV(t_key);
                uint data_t = BitConverter.ToUInt32(data, i);
                data_t ^= iv;
                data_t ^= a;
                output.AddRange(BitConverter.GetBytes(data_t));
                a += data_t;
                t_key++;

            }
            //if (!IsAvailable(output.ToArray()))
            //throw new Exception("This is not a standard Rho File!!!.[Verify failure]");
            return output.ToArray();
        }

        public static uint GetIV(uint value)
        {
            byte[] bts = BitConverter.GetBytes(value);
            int a = bts[0];
            int b = bts[1];
            int c = bts[2];
            int d = bts[3];
            uint output = 0;
            output = BitConverter.ToUInt32(dataA, a * 4);
            output ^= BitConverter.ToUInt32(dataB, b * 4);
            output ^= BitConverter.ToUInt32(dataC, c * 4);
            output ^= BitConverter.ToUInt32(dataD, d * 4);
            return output;
        }

        public static uint GetHash(uint Base, byte[] data)
        {
            uint output = (Base >> 0x10) & 0x0000FFFF;
            Base &= 0x0000FFFF;
            if (data.Length == 0x01)//AEB750
            {
                Base += data[0];
                if (Base >= 0xFFF1)
                    Base -= 0xFFF1;
                output += Base;
                if (output >= 0xFFF1)
                    output -= 0xFFF1;
                output = (output << 0x10) | Base;
                return output;
            }
            else
            {
                //AEB7A2
                if (data == null)
                    return 0x01;
                if (data.Length < 0x10)//AEB7B2
                {
                    //Loop
                    for (int i = 0; i < data.Length; i++)
                    {
                        Base += data[i];
                        output += Base;
                    }
                    if (Base >= 0xFFF1)
                        Base -= 0xFFF1;
                    int res = 0;
                    Base = (uint)Math.DivRem((int)Base, 0xFFF1, out res);
                    Base = (uint)res;
                    output = (uint)Math.DivRem((int)output, 0xFFF1, out res);
                    output = (uint)res;
                    output <<= 0x10;
                    output = output | Base;
                    return output;
                }
                else
                {
                    //AEB81A
                    if (data.Length >= 0x15B0)
                    {
                        int temp_length = data.Length;
                        for (int x = 0; ; x++)
                        {
                            for (int i = x * 0x15B0; (i + 0x0F) < 0x15B0; i += 0x10)
                            {
                                Base += data[i];
                                output += Base;
                                Base += data[i + 0x01];
                                output += Base;
                                Base += data[i + 0x02];
                                output += Base;
                                Base += data[i + 0x03];
                                output += Base;
                                Base += data[i + 0x04];
                                output += Base;
                                Base += data[i + 0x05];
                                output += Base;
                                Base += data[i + 0x06];
                                output += Base;
                                Base += data[i + 0x07];
                                output += Base;
                                Base += data[i + 0x08];
                                output += Base;
                                Base += data[i + 0x09];
                                output += Base;
                                Base += data[i + 0x0A];
                                output += Base;
                                Base += data[i + 0x0B];
                                output += Base;
                                Base += data[i + 0x0C];
                                output += Base;
                                Base += data[i + 0x0D];
                                output += Base;
                                Base += data[i + 0x0E];
                                output += Base;
                                Base += data[i + 0x0F];
                                output += Base;
                            }
                            int res = 0;
                            Base = (uint)Math.DivRem((int)Base, 0xFFF1, out res);
                            output = (uint)Math.DivRem((int)output, 0xFFF1, out res);
                            temp_length -= 0x15B0;
                            if (temp_length < 0x15B0)
                                break;
                        }//AEB9D4
                        if (temp_length == 0)
                        {
                            output = (output >> 0x10) | Base;
                            return output;
                        }
                        //
                        if (temp_length < 0x10)//AEB9DE
                        {
                            for (int i = data.Length - temp_length + 1; i < data.Length; i++)
                            {
                                Base += data[i];
                                output += Base;
                            }
                            if (Base >= 0xFFF1)
                                Base -= 0xFFF1;
                            int res = 0;
                            output = (uint)Math.DivRem((int)output, 0xFFF1, out res);
                            output >>= 0x10;
                            output |= Base;
                            return output;
                        }
                        else
                        {
                            //
                            for (int i = data.Length - temp_length + 1; (i + 0x0F) < data.Length; i += 0x10)
                            {
                                temp_length -= 0x10;
                                Base += data[i];
                                output += Base;
                                Base += data[i + 0x01];
                                output += Base;
                                Base += data[i + 0x02];
                                output += Base;
                                Base += data[i + 0x03];
                                output += Base;
                                Base += data[i + 0x04];
                                output += Base;
                                Base += data[i + 0x05];
                                output += Base;
                                Base += data[i + 0x06];
                                output += Base;
                                Base += data[i + 0x07];
                                output += Base;
                                Base += data[i + 0x08];
                                output += Base;
                                Base += data[i + 0x09];
                                output += Base;
                                Base += data[i + 0x0A];
                                output += Base;
                                Base += data[i + 0x0B];
                                output += Base;
                                Base += data[i + 0x0C];
                                output += Base;
                                Base += data[i + 0x0D];
                                output += Base;
                                Base += data[i + 0x0E];
                                output += Base;
                                Base += data[i + 0x0F];
                                output += Base;
                            }
                            //AEB9E2
                            for (int i = data.Length - temp_length + 1; i < data.Length; i++)
                            {
                                Base += data[i];
                                output += Base;
                            }
                            if (Base >= 0xFFF1)
                                Base -= 0xFFF1;
                            int res = 0;
                            output = (uint)Math.DivRem((int)output, 0xFFF1, out res);
                            output >>= 0x10;
                            output |= Base;
                            return output;
                        }
                    }
                    else
                    {
                        //
                        int temp_length = data.Length;
                        int t_i = 0;
                        for (int i = 0; (i + 0x0F) < data.Length; i += 0x10)
                        {
                            temp_length -= 0x10;
                            Base += data[i];
                            output += Base;
                            Base += data[i + 0x01];
                            output += Base;
                            Base += data[i + 0x02];
                            output += Base;
                            Base += data[i + 0x03];
                            output += Base;
                            Base += data[i + 0x04];
                            output += Base;
                            Base += data[i + 0x05];
                            output += Base;
                            Base += data[i + 0x06];
                            output += Base;
                            Base += data[i + 0x07];
                            output += Base;
                            Base += data[i + 0x08];
                            output += Base;
                            Base += data[i + 0x09];
                            output += Base;
                            Base += data[i + 0x0A];
                            output += Base;
                            Base += data[i + 0x0B];
                            output += Base;
                            Base += data[i + 0x0C];
                            output += Base;
                            Base += data[i + 0x0D];
                            output += Base;
                            Base += data[i + 0x0E];
                            output += Base;
                            Base += data[i + 0x0F];
                            output += Base;
                            t_i += 0x10;
                        }
                        //AEB9E2
                        for (int i = t_i; i < data.Length; i++)
                        {
                            Base += data[i];
                            output += Base;
                            t_i++;
                        }
                        if (Base >= 0xFFF1)
                            Base -= 0xFFF1;
                        int res = 0;
                        Base = (uint)Math.DivRem((int)Base, 0xFFF1, out res);
                        Base = (uint)res;
                        output = (uint)Math.DivRem((int)output, 0xFFF1, out res);
                        output = (uint)res;
                        output <<= 0x10;
                        output = output | Base;
                        return output;
                    }
                }
            }
        }

        public static bool IsAvailable(byte[] DecryptBlock2)
        {
            uint hash = BitConverter.ToUInt32(DecryptBlock2, 0);
            byte[] data = new byte[0x7C];
            Array.Copy(DecryptBlock2, 4, data, 0, 0x7C);
            uint Hash_ = GetHash(0, data);
            bool Output = Hash_ == hash;
            uint check2 = BitConverter.ToUInt32(DecryptBlock2, 4);
            Output &= check2 == 0x10001;
            return Output;
        }
    }
}
